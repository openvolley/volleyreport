% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vr_match_summary.R
\name{vr_match_summary}
\alias{vr_match_summary}
\alias{vr_css}
\title{Generate single-page match summary report}
\usage{
vr_match_summary(
  x,
  outfile,
  refx,
  vote = TRUE,
  format = "html",
  icon = NULL,
  css = vr_css(),
  remove_nonplaying = TRUE,
  style = "default",
  home_players = TRUE,
  visiting_players = TRUE,
  base_font_size = 11,
  court_plots_function = "vr_court_plots",
  court_plots_args = list(),
  plot_icons,
  skill_evaluation_decode = "guess",
  single_page_tries = 1L,
  shiny_progress = FALSE,
  chrome_print_extra_args = NULL,
  ...
)

vr_css()
}
\arguments{
\item{x}{datavolley or string: as returned by \code{datavolley::dv_read}, or the path to such a file}

\item{outfile}{string: path to file to produce (if not specified, will create a file in the temporary directory)}

\item{refx}{data.frame: some choices of \code{style} require a reference data set to calculate e.g. expected SO. This should be from comparison matches (e.g. all matches from the same league), and should be a data.frame of the plays components from those matches. If missing, expected SO and BP will be replaced by reception and serve efficiency}

\item{vote}{logical: include vote report component? If not explicitly specified, \code{vote} might be set to FALSE depending on \code{style}}

\item{format}{string: "pdf" (using latex-based PDF), "paged_pdf" (using pagedown-based PDF), "png", "paged_png", or "html"}

\item{icon}{string: (optional) filename of icon image to use}

\item{css}{list: css specifications for some elements, giving (currently fairly limited) control over appearance. See the output of \code{\link{vr_css}} for an example. Note that some styling does not seem to be applied when exporting to PDF}

\item{remove_nonplaying}{logical: if \code{TRUE}, remove players from the team summaries that did not take to the court}

\item{style}{string: can be
\itemize{
\item "default" - the standard FIVB match report
\item "ov1" - modified version of "default" with score evolution plot, different breakdown by rotation, and other changes
}}

\item{home_players}{logical: include a table with individual player statistics for the home team?}

\item{visiting_players}{logical: include a table with individual player statistics for the visiting team?}

\item{base_font_size}{numeric: the base font size (the font sizes in different parts of the report are scaled relative to this)}

\item{court_plots_function}{string or function: a function, or name of a function, that takes a datavolley object and produces a plot object. Supply your own function here to override the court plots that are included in the report for some values of \code{style}}

\item{court_plots_args}{list: named list of arguments to pass to the court plot function}

\item{plot_icons}{logical or data.frame: some values of \code{style} will include plots of various kinds in the report. Currently \code{plot_icons} defaults to \code{TRUE} for \code{style = "ov1"} on a beach match, otherwise \code{FALSE} (plot icons generally tend to be visually distracting with indoor, particularly the error icons). Set \code{plot_icons} to \code{FALSE} for no icons, \code{TRUE} to use the icons specified by \code{\link[=vr_plot_icons]{vr_plot_icons()}}, or a data.frame as returned by \code{\link[=vr_plot_icons]{vr_plot_icons()}} to control the icons that will be used. Note that only (free) fontawesome icons are supported}

\item{skill_evaluation_decode}{: as for \code{\link[datavolley:read_dv]{datavolley::dv_read()}}}

\item{single_page_tries}{integer: experimental! Ideally we want a single-page report, but until the report is rendered to PDF we don't know for sure whether it will fit on one page. If \code{single_page_tries} is greater than 1, we will try re-rendering the report (trying up to this many times). If it does not fit on a single page, the \code{base_font_size} will be progressively reduced on each try. Note that this only applies to \code{format} "paged_pdf"}

\item{shiny_progress}{logical: if \code{TRUE}, the report generation process will issue \code{shiny::setProgress()} calls. The call to \code{vr_match_summary} should therefore be wrapped in a \code{shiny::withProgress()} scope}

\item{chrome_print_extra_args}{character: additional parameters to pass as \code{extra_args} to \code{\link[pagedown:chrome_print]{pagedown::chrome_print()}} (only relevant if using a "paged_*" format)}

\item{...}{: additional parameters passed to the rmarkdown template}
}
\value{
The path to the report file
}
\description{
Generate single-page match summary report
}
\examples{
\dontrun{
  f <- vr_match_summary(dv_example_file(), format = "paged_pdf")
  if (interactive()) browseURL(f)
}
}
